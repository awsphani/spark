https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C

download Scala
 ls -ltr ~/Downloads/scala-2.11.11.tgz
 cp ~/Downloads/scala-2.11.11.tgz .
 tar xzf scala-2.11.11.tgz
 ln -s scala-2.11.11 scala ->soft link
 
 vi ~/.profile or  vi ~/.bash_profile
 export SCALA_HOME= /users/PKUM60/scala
 export PATH=$PATH:$SCALA_HOME/bin
 run profile
. ~/.profile
 echo $PATH
 
 scala
 scala>print("HELLO")
 -----
 
 
 setup intellij
 .dmg


#Scala is JVM based functional programming language.
Spark is completely developed using Scala
On top of Spark (used for data processing), Scala also have frameworks such as Play to develop web applications

REPL â€“ Read, Evaluate, Print and Loop
Use scala command to launch REPL
:quit to come out
Ctrl+l to clear the screen



download and install jdk 8 macos
download intellj community edition
 ->set darcula thema,default plugins, featured plugins(scala ,ideavim install ans ide features trainer install)
start using intellij ide -> should see scala on left panel and sbt on right; if you dont see scal, hit cancel
configure->plugins->browse repositories-> search scala and install



new project: select scala from left panel and select sbt on right andd next

name: spark2demo
jdk 1.8
sbt 1.2.1
scala 2.12.6 finish

src>main>new scala class>HW

object HW {

  def main(args: Array[String]): Unit = {
    println("Hello World")
    println("Hello World:"+ args(0))
  }
}

run->edit config-> pass program argument for args(0) value

-----
sbt(simple build tool) download and install
https://www.scala-sbt.org/download.html
http://biercoff.com/easy-steps-to-install-scala-and-sbt-on-your-mac/
1.2.1

right clik on project on left panel>copy path

/Users/pkum60/IdeaProjects/spark2demo

terminal cd /Users/pkum60/IdeaProjects/spark2demo

you will have src and build.sbt folders

> sbt package (this will create jar file)
>sbt "run-main HW hellophani"

> ~package ( will wait for recompile of pkg)
double click in build.sbt from spark2demo project on left panel
> ~run ( run the changes now)
https://spark.apache.org/docs/latest/quick-start.html
search build.sbt


datasets
github.com/dgadiraju/data clone/download

https://resources.itversity.com/courses/cca-175-spark-and-hadoop-developer-certification-scala/lessons/cca-scala-fundamentals-scala/

https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C

download scala:
2.11.11

ls -ltr ~/Downloads/scala-2.11.11.tgz

pkum60> cp ~/Downloads/scala-2.11.11.tgz .
tar xzf scala-2.11.11.tgz
softlink
ln -s scala-2.11.11 scala

vi ~/.profile

export SCALA_HOME= /users/PKUM60/scala
export PATH=$PATH:$SCALA_HOME/bin

run profile
. ~/.profile


--------
https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C
www.itversity.com/topic/cca-setup-scala-and-ide
eclipse with maven or STS(spring tool suite)
help>eclipse market place->scala ide 4.2.x
new-> scala wizards->scala project->getstart
src-> new scala worksheet

sbt(simple build tool) download and install
https://www.scala-sbt.org/download.html
http://biercoff.com/easy-steps-to-install-scala-and-sbt-on-your-mac/
1.2.1

go to folder where getstart project is cretaed in terminal

>sbt eclipse
>ls -ltr
.classpath,.project, .settings gets created

from eclipse import new->existing projects and give the path for getstart above.

---

https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C
Intellij

new project: select scala from left panel and select sbt on right andd next

name: getstart
jdk 1.8
sbt 1.2.1
scala 2.12.6 finish
 
 getstart>src>main>new worksheet>gs
 print("HELLO lets start")
 
 
 src>main>new scala class->HelloWorld- kind object
 
 object HelloWorld {
  def main(args: Array[String]): Unit = {
    print("HelloOregon")
    print("Hello "+args(0) 
  }
}
run->edit config-> pass program argument for args(0) value

----

 www.itversity.com/lessons/cca-learn-scala
 
 REPL-read evaluate,print loop
 
 Scala>:help
 :javap ->gives metadata of compiled byte code
 :sh ->run shell command
 :save /Users/pkum60/savings.sc ->saves all commands used in scala 
 :quit 
 :paste
 
 #Declaring variables
 no need to define datatypes but tell ifs its mutable(var) or immutable(val) (like final in java)
 initialization in mandatory with val
 
  object HelloWorld {
  def main(args: Array[String]): Unit = {
    print("HelloOregon \n")
    print("Hello "+args(0))

    /*Declaring variables
    no need to define data types but tell ifs its mutable(var) or immutable(val) (like final in java)
    initialization in mandatory with val
    variables are statically typed, once data type is defined you cannot change to another data type
    there is no distinction such as primitive type or classes for primitive types
    int / Integer;
    all primitive types are classes in scala, if primitive needed scala compiler will take care of it
    value classes for primitives are Byte(signed 8 bits) -2^7 to -2^7-1,Short(signed16 bit),Int(signed32 bit),Long(signed64 bit),
    Char(16 bit unsigned 2^0 to 2^16-1 inclusive ),
    String(seq of chars),
    Float(32 bit single precision float),Double(32 bit double precision float),
    */

    val i = 0
    print(" \n i is " +i )
    val a: Int = 34
    print(" \n a is " +a )
    val l:Long = 12L
    print(" \n l is " +l )
    val f:Float = 12.0f
    print(" \n f is " +f )
    var p = 2

    print(" \n initial val of p"+p)
    p=5
    print(" \n initial val of p changed to "+p)

    //code blk assignment

    val c = {
      val t = 1;
      val j= math.pow(2,5)
      t-j
    }
    print(" \n  val of code blk c  "+c)

    /*
    * Programming constructs
    *
    * */

    val r = (math.random*100).toInt
    val s = (math.random*100).toInt
    print("\n r and s are :"+r+": " +s)
    if(r>s){
      print(" \n r is greater than s ")
    }else if(r<s){
      print(" \n s is greater than r ")
    }else{
      print(" \n Both s and r are equal")
    }

    //ternary operator
    val res1= {
      if(s>r) s else r
    }
    print("\n res is "+res1)

    for(e <- 1 to 10 by 2)
      print("n e is:"+e)

    //Factorial

    val fact=5
    var res= 1
    for(e<-fact to 2 by -1 )
      res = res*e
    print("\n Factorial of " + fact +" is:"+res )

    //Fibs

    val fib =10

    var prev=0
    var curr=1
    print("\n prev and curr are: "+prev +" "+ curr+"\n")
    var result = 0
    for(e<- 2 to fib-1 ){
      result = prev +curr
      print(result)
      prev=curr
      curr=result
    }



  }
}

 
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
