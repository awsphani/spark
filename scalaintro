https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C
https://hadoopist.wordpress.com/category/apache-spark/page/1/

download Scala
 ls -ltr ~/Downloads/scala-2.11.11.tgz
 cp ~/Downloads/scala-2.11.11.tgz .
 tar xzf scala-2.11.11.tgz
 ln -s scala-2.11.11 scala ->soft link
 
 vi ~/.profile or  vi ~/.bash_profile
 export SCALA_HOME= /users/PKUM60/scala
 export PATH=$PATH:$SCALA_HOME/bin
 run profile
. ~/.profile
 echo $PATH
 
 scala
 scala>print("HELLO")
 -----
 
 
 setup intellij
 .dmg


#Scala is JVM based functional programming language.
Spark is completely developed using Scala
On top of Spark (used for data processing), Scala also have frameworks such as Play to develop web applications

REPL â€“ Read, Evaluate, Print and Loop
Use scala command to launch REPL
:quit to come out
Ctrl+l to clear the screen



download and install jdk 8 macos
download intellj community edition
 ->set darcula thema,default plugins, featured plugins(scala ,ideavim install ans ide features trainer install)
start using intellij ide -> should see scala on left panel and sbt on right; if you dont see scal, hit cancel
configure->plugins->browse repositories-> search scala and install



new project: select scala from left panel and select sbt on right andd next

name: spark2demo
jdk 1.8
sbt 1.2.1
scala 2.12.6 finish

src>main>new scala class>HW

object HW {

  def main(args: Array[String]): Unit = {
    println("Hello World")
    println("Hello World:"+ args(0))
  }
}

run->edit config-> pass program argument for args(0) value

-----
sbt(simple build tool) download and install
https://www.scala-sbt.org/download.html
http://biercoff.com/easy-steps-to-install-scala-and-sbt-on-your-mac/
1.2.1

right clik on project on left panel>copy path

/Users/pkum60/IdeaProjects/spark2demo

terminal cd /Users/pkum60/IdeaProjects/spark2demo

you will have src and build.sbt folders

> sbt package (this will create jar file)
>sbt "run-main HW hellophani"

> ~package ( will wait for recompile of pkg)
double click in build.sbt from spark2demo project on left panel
> ~run ( run the changes now)
https://spark.apache.org/docs/latest/quick-start.html
search build.sbt


datasets
github.com/dgadiraju/data clone/download

https://resources.itversity.com/courses/cca-175-spark-and-hadoop-developer-certification-scala/lessons/cca-scala-fundamentals-scala/

https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C

download scala:
2.11.11

ls -ltr ~/Downloads/scala-2.11.11.tgz

pkum60> cp ~/Downloads/scala-2.11.11.tgz .
tar xzf scala-2.11.11.tgz
softlink
ln -s scala-2.11.11 scala

vi ~/.profile

export SCALA_HOME= /users/PKUM60/scala
export PATH=$PATH:$SCALA_HOME/bin

run profile
. ~/.profile


--------
https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C
www.itversity.com/topic/cca-setup-scala-and-ide
eclipse with maven or STS(spring tool suite)
help>eclipse market place->scala ide 4.2.x
new-> scala wizards->scala project->getstart
src-> new scala worksheet

sbt(simple build tool) download and install
https://www.scala-sbt.org/download.html
http://biercoff.com/easy-steps-to-install-scala-and-sbt-on-your-mac/
1.2.1

go to folder where getstart project is cretaed in terminal

>sbt eclipse
>ls -ltr
.classpath,.project, .settings gets created

from eclipse import new->existing projects and give the path for getstart above.

---

https://www.youtube.com/watch?v=ecJXK27eCOo&list=PLf0swTFhTI8rv85gSUEyBxN6fdv5D2E0C
Intellij

new project: select scala from left panel and select sbt on right andd next

name: getstart
jdk 1.8
sbt 1.2.1
scala 2.12.6 finish
 
 getstart>src>main>new worksheet>gs
 print("HELLO lets start")
 
 
 src>main>new scala class->HelloWorld- kind object
 
 object HelloWorld {
  def main(args: Array[String]): Unit = {
    print("HelloOregon")
    print("Hello "+args(0) 
  }
}
run->edit config-> pass program argument for args(0) value

----

 www.itversity.com/lessons/cca-learn-scala
 
 REPL-read evaluate,print loop
 
 Scala>:help
 :javap ->gives metadata of compiled byte code
 :sh ->run shell command
 :save /Users/pkum60/savings.sc ->saves all commands used in scala 
 :quit 
 :paste
 
 #Declaring variables
 no need to define datatypes but tell ifs its mutable(var) or immutable(val) (like final in java)
 initialization in mandatory with val
 
  object HelloWorld {
  def main(args: Array[String]): Unit = {
    print("HelloOregon \n")
    print("Hello "+args(0))

    /*Declaring variables
    no need to define data types but tell ifs its mutable(var) or immutable(val) (like final in java)
    initialization in mandatory with val
    variables are statically typed, once data type is defined you cannot change to another data type
    there is no distinction such as primitive type or classes for primitive types
    int / Integer;
    all primitive types are classes in scala, if primitive needed scala compiler will take care of it
    value classes for primitives are Byte(signed 8 bits) -2^7 to -2^7-1,Short(signed16 bit),Int(signed32 bit),Long(signed64 bit),
    Char(16 bit unsigned 2^0 to 2^16-1 inclusive ),
    String(seq of chars),
    Float(32 bit single precision float),Double(32 bit double precision float),
    */

    val i = 0
    print(" \n i is " +i )
    val a: Int = 34
    print(" \n a is " +a )
    val l:Long = 12L
    print(" \n l is " +l )
    val f:Float = 12.0f
    print(" \n f is " +f )
    var p = 2

    print(" \n initial val of p"+p)
    p=5
    print(" \n initial val of p changed to "+p)

    //code blk assignment

    val c = {
      val t = 1;
      val j= math.pow(2,5)
      t-j
    }
    print(" \n  val of code blk c  "+c)

    /*
    * Programming constructs
    *
    * */

    val r = (math.random*100).toInt
    val s = (math.random*100).toInt
    print("\n r and s are :"+r+": " +s)
    if(r>s){
      print(" \n r is greater than s ")
    }else if(r<s){
      print(" \n s is greater than r ")
    }else{
      print(" \n Both s and r are equal")
    }

    //ternary operator
    val res1= {
      if(s>r) s else r
    }
    print("\n res is "+res1)

    for(e <- 1 to 10 by 2)
      print("n e is:"+e)

    //Factorial

    val fact=5
    var res= 1
    for(e<-fact to 2 by -1 )
      res = res*e
    print("\n Factorial of " + fact +" is:"+res )

    //Fibs

    val fib =10

    var prev=0
    var curr=1
    print("\n prev and curr are: "+prev +" "+ curr+"\n")
    var result = 0
    for(e<- 2 to fib-1 ){
      result = prev +curr
      print(result)
      prev=curr
      curr=result
    }
  }
}

Higher order and Anonymous funcs


Func can be a parameter , a return variable

def sum(f: Int=>, a: Int, b: Int): Int = {
   if(a<b) 0 else f(a) + sum(f,a+1,b)
}

def id(i: Int) =i
def sqr(i: Int) = math.pow(i,2).toInt
def cube(i: Int) = math.pow(i,3).toInt

sum(id,1,10)
sum(sqr,1,5)
sum(cube,1,4)

/*
    *
    * Anonymous funcs, need not have a name and can be assigned to variables, these vars
    * can be passes a parameters
    * */

    // anon funcs defined as vars, funct without name

    val i1 = (i: Int) => i
    val s1 = (i: Int) => i*i
    val c1 = (i: Int) => i*i*i

    print("\n anon func i1(10):"+ i1(10))
    print("\n anon func s1(10):"+ s1(10))
    print("\n anon func c1(10):"+ c1(10))


    /*
    * pass anon func as parameter to func(higherorder) like below
    *
    * */

    print("\n sum of numbers:"+sum((i: Int)=> i,1,10))
    print("\n sum of squares of numbers:"+sum((i: Int)=> i*i,1,10))
    print("\n sum of cubes of numbers:"+sum((i: Int)=> i*i*i,1,10))

 

Operators

    /*
    * Operators
    *
    * &&,||,==(compares attributes of the objects or objects ;not object references(same mem locs, in java == same address comp,==compares values in objects java), similar to equals in java)
    *
    *
    * in java
    *
    * String s1 = new String("HELLO");
    * String s2 = new String("HELLO");
    * System.out.println(s1 == s2); -> false both the objects s1,s2 have diff addresses
    * System.out.println(s1.equals(s2)); -> true, both objects have same value.
    *
    *
    *
    * In scala == is like equals in java
    *
    * ==, .equals are same in scala
    *


    * */

    val q= 2
    val q1=2

    println(q==q1)
    println(q.equals(q1))
 
 
 
 object oriented, 
 
 polymorphism,abstraction,inheritance,encapsulation; classes,subclasses,objects(singleton classes),Traits(similar to iubterfaces
 
 objects,classes,companion object, case classes
 
 objects(singleton classes)
 
 
 object Comb {

  /*
  * object is singleton
  * Scala doesnot support static keyword like in java,
  * so create object type then all methods,variables become static, now can invoke using
  * classname. notations
  *
  *go to path of the project and use sbt console
  *
  * Comb.main(Array(" "))
  *
  *or sbt run - if only one main func in the project
  *
  * sbt "run 5,3" if only 1 main func
  * sbt run-main "Comb 5,3"
  * javap -p Comb$ ->class file , can see the metadata of the singleton class
  *
  * */

  def main(args: Array[String]): Unit ={
    print("Hello Comb")

    val n = args(0).toInt
    val r = args(1).toInt
    val c = HelloWorld.ncr(n,r)

    println("\n ncr for n="+n+",r="+r+" is"+c)

    // create object of Departments, mutable (val)or immutable (var)

    val d = new Departments(1, "HR")
    

  }
  
  
  /*
*
* sbt run-main "Comb 5,3"
*
* class Departments(departmentId : Int, departmentName: String){}
*
* the above will create a default constructor departmentId,departmentName ->constructor arguments
*
* if we use val or var it will be class variables
*
* class Departments( val departmentId : Int, val departmentName: String){}
* we will get two variables like java and 2 getters and constructors as we are using val we will not get setters
*
* private final int departmentId
* private final int departmentName:
* public int departmentId()
* public java.lang.string departmentName()
* public Departments(int,java.lang.string )
*
*class Departments( var departmentId : Int, var departmentName: String){}
* we will get setters also
*
* public void departmentId_$eq(int)
* public void departmentName_$eq(java.lang.string)
* */

class Departments(var departmentId : Int, var departmentName: String) {

  println("departmentId is: "+departmentId)

  println("departmentName is: "+departmentName)

}
 
package com.test.retail

/*
*
* OrderItem class with construct args as no var/val
*
* internally constructor will be created as
* public OrderItem(int,int,int,int,float,float)
*
*value classes, the primitive datatypes are created in constructor , scala calsses are
*
* value classes, they behave as primitives and when need behave as class variables Int,Float
*hiding all the complexity from us, we just need to use Int, Float...
*itversity.com/topic/overview-of-classes/
*
*
* orderItemSubtotoal=orderItemQuantity*orderItemProductPrice
*
*
*
* */


class OrderItem( var orderItemId : Int,
                 var orderItemOrderId: Int,
                 var orderItemProductId: Int,
                 var orderItemQuantity: Int,
                 var orderItemSubtotal: Float,
                 var orderItemProductPrice: Float) {


// create require ( special function similar to apply function)which will ensure subtotal=quantity*price

  require(orderItemSubtotal==orderItemQuantity*orderItemProductPrice, "Invalid orderItemSubtotal")

// will create additional constructor with 5 args using this keyword;  orderItemSubtotal which we can calculate bases on orderItemQuantity*orderItemProductPrice

  def this (orderItemId : Int,
        orderItemOrderId : Int,
        orderItemProductId: Int,
        orderItemQuantity: Int,
        orderItemProductPrice: Float) ={
   //invoke the default constructor with 6 args
   this(orderItemId,orderItemOrderId,orderItemProductId,orderItemQuantity,orderItemQuantity * orderItemProductPrice,orderItemProductPrice)
 }

//override toString method

  override def toString = "OrderItem(" +
                          orderItemId+
                          ","+
                          orderItemOrderId+
                          ","+
                          orderItemProductId+
                          ","+
                          orderItemQuantity+
                          ","+
                          orderItemSubtotal+
                          ","+
                          orderItemProductPrice+
                          ")"


}

package com.test.retail

object RetailMain {

  def main(args: Array[String]): Unit = {

    //passing values to default constructor but passing wrong value for subtotal, so require function in class OrderItem will throw error
    //Exception in thread "main" java.lang.IllegalArgumentException: requirement failed: Invalid orderItemSubtotal

    //val oi= new OrderItem(1,1,1,3,100,50)

    val oi= new OrderItem(1,1,1,3,150,50)

    println(oi) // this is printing com.test.retail.OrderItem@4cdbe50f; we can override toString method; after override we got OrderItem(1,1,1,3,150.0,50.0)

    //invoking second constructor with 5 args, which will invoke the default constructor with calculated subtotal

    val oi1= new OrderItem(1,1,1,3,50)

    println(oi1)

  }
}

Companion Objects and case classes


companion object will have same name as class name, we can access private var of class using companion object


class CompA (private val message: String){

  object CompA{
    val a = new CompA("Hello Companion class")
    println(a.message)
  }

}


class CompA (private val message: String){

  object CompA{
    val a = new CompA("Hello Companion class")
    println(a.message)
  }

}

A

class CompA (private val message: String){

  object CompB{
    val a = new CompA("Hello Companion class")
    println(a.message)
  }
  
 we will get error as CompB not same name as class , so not companion, classA cannot be access private variable message

}


package com.test.retail


/*
*case class implements serializable(converting its state to byte stream to transmit object data across network),
*Serialization and Deserialization in Java with Example. Serialization is a mechanism of converting the state of an object into a byte stream.
* Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.
* This mechanism is used to persist the object.
* case class will have companion object associated with it
*
* :javap -p OrderItemCaseKLS ->to check metadata of case class in sbt
* :javap -p OrderItemCaseKLS$ ->to check metadata of companion object in sbt
*
*
*OrderItemCaseKLS implements scala.Serializable,scala.Product
*scala.Product will have productArity(), productElement(int),productIterator() methods
*OrderItemCaseKLS have default toString() method
*case class parameters are val so we will get all getters; for normal class not setters as parameters are not val or var by default
*case class  will also have some copy(), override method for hashCode() methods
*case class will have companion object which will have apply(int,int,int,float,float) and unapply(OrderItemCaseKLS) methods
* using Apply method we are create the object of class
* can invoke the apply method just by using the object name, like below
*
*
*its always better to invoke the companion objects apply method to create class object
*
*val oikls = OrderItemCaseKLS(1,1,1,3,150.0f,50.0f)
*
*invoke the companion objects apply method to create class object

* val oikls = OrderItemCaseKLS(1,1,1,3,150.0f,50.0f)

* println(oikls)  // is printing OrderItemCaseKLS(1,1,1,3,150.0,50.0) ie using the ovveride method for .toString() of case class

* println(oikls.orderItemId) // will print orderItemId value using setters of class class

* println(oikls.productArity) // will print number of class arguments/attributes/elements

* println(oikls.productElement(0)) // will print first attribute of class

* oikls.productIterator.foreach(println)  // will loop and print all elements/attributes passed to create case class
*
* */
case class OrderItemCaseKLS (orderItemId : Int,
                             orderItemOrderId: Int,
                             orderItemProductId: Int,
                             orderItemQuantity: Int,
                             orderItemSubtotal: Float,
                             orderItemProductPrice: Float){




}
 
//operators and functions as part of classes

/*
*
*f = n1,d1
* s = n2, d2
* f+s = n1*d2+n2*d1/ d1*d2 ->override +
*toString = print n1/d1
*
* */

class FractionOverride(val n: Int, val d: Int) {

  override def toString = n + "/" + d

  def result = n/d.toDouble

  // below function takes one fraction and returns another fraction

  def +(p: FractionOverride) = {

    new FractionOverride((n * p.d + d * p.n),(d * p.d))

  }

}
object FractionOverride{

  def main(args: Array[String]): Unit = {

    val f = new FractionOverride(2,4)

    println(f)
    println(f.result)

    val s = new FractionOverride(3,5)

    println(s)
    println(s.result)

    //   2/4 + 3/5 -> 2*5+4*3,4*5
    val r = f + s

    println(r)


    println(r.result)






  }
}







//dependencies import in build.sbt

name := "getstart"

version := "0.1"

scalaVersion := "2.12.7"

libraryDependencies += "com.typesafe" % "config" % "1.3.1"

libraryDependencies += "mysql" % "mysql-connector-java" % "5.1.36"







